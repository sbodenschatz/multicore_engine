function(make_src_groups)
	file(GLOB src_dirs RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/include "include/*" "include/*/*" "include/*/*/*" "include/*/*/*/*")
	file(GLOB src_dirs2 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/src "src/*" "src/*/*" "src/*/*/*" "src/*/*/*/*")
	list(APPEND src_dirs ${src_dirs2})
	list(REMOVE_DUPLICATES src_dirs)
	foreach(src_dir ${src_dirs})
		if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/${src_dir} OR IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/${src_dir})
			string(REPLACE / \\ src_grp ${src_dir})
			source_group(${src_grp} REGULAR_EXPRESSION "(src/${src_dir}|include/${src_dir})/.*")
		endif()
	endforeach()
endfunction()

function(make_build_scripts_project)
	file(GLOB_RECURSE BUILD_SCRIPTS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*CMake*.txt")
	list(APPEND BUILD_SCRIPTS ${ARGN})
	add_custom_target(BUILD_SCRIPTS SOURCES ${BUILD_SCRIPTS})
	file(GLOB src_dirs RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*")
	foreach(src_dir ${src_dirs})
		if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${src_dir})
			string(REPLACE / \\ src_grp ${src_dir})
			source_group(${src_grp} REGULAR_EXPRESSION "${src_dir}/.*")
		endif()
	endforeach()
endfunction()

function(make_src_grp_dir)
	file(GLOB src_dirs RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*" "*/*" "*/*/*" "*/*/*/*")
	foreach(src_dir ${src_dirs})
		if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${src_dir})
			string(REPLACE / \\ src_grp ${src_dir})
			source_group(${src_grp} REGULAR_EXPRESSION "${src_dir}/.*")
		endif()
	endforeach()
endfunction()

function(compile_glsl_to_spirv OUTPUT_LIST)
	set(SPV_LIST)
	foreach(SRC_FILE ${ARGN})
		set(SPV_FILE ${SRC_FILE}.spv)
		add_custom_command(
			OUTPUT ${SPV_FILE}
			COMMAND glslangValidator -s -V -o ${SPV_FILE} ${CMAKE_CURRENT_SOURCE_DIR}/${SRC_FILE}
			MAIN_DEPENDENCY ${SRC_FILE}
			COMMENT "Compiling GLSL shader \"${SRC_FILE}\" to SPIR-V file \"${SPV_FILE}\""
		)
		list(APPEND SPV_LIST ${SPV_FILE})
	endforeach()
	set(${OUTPUT_LIST} ${SPV_LIST} PARENT_SCOPE)
endfunction()

function(build_load_units OUTPUT_META_LIST OUTPUT_PAYLOAD_LIST)
	set(LUP_LIST)
	set(LUM_LIST)
	foreach(DESC_FILE ${ARGN})
		get_filename_component(BASE_NAME ${DESC_FILE} NAME_WE)
		get_filename_component(DIR ${DESC_FILE} DIRECTORY)
		set(PL_FILE ${DIR}${BASE_NAME}.lup)
		set(META_FILE ${DIR}${BASE_NAME}.lum)
		set(DEPS_FILE ${CMAKE_CURRENT_BINARY_DIR}/${DIR}${BASE_NAME}.deps)
		set(DEPS_LIST)
		if(EXISTS ${DEPS_FILE})
			file(READ ${DEPS_FILE} DEPS_LIST)
		endif()
		add_custom_command(
			OUTPUT ${META_FILE} ${PL_FILE}
			COMMAND multicore_engine_load_unit_gen -m ${META_FILE} -p ${PL_FILE} --deps ${DEPS_FILE} -d ${CMAKE_CURRENT_SOURCE_DIR}/${DESC_FILE}
			MAIN_DEPENDENCY ${DESC_FILE}
			DEPENDS ${DEPS_LIST}
			COMMENT "Building load unit from \"${DESC_FILE}\" to meta file \"${META_FILE}\" and payload file \"${PL_FILE}\""
		)
		list(APPEND LUM_LIST ${META_FILE})
		list(APPEND LUP_LIST ${PL_FILE})
	endforeach()
	set(${OUTPUT_META_LIST} ${LUM_LIST} PARENT_SCOPE)
	set(${OUTPUT_PAYLOAD_LIST} ${LUP_LIST} PARENT_SCOPE)
endfunction()
