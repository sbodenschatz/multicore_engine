variables:
    BUILD_CONCURRENCY: "10"

stages:
  - build
  - auxiliary
  - package

.cache-paths-spec: &cache-paths
    - build

.linux-cache-spec-template: &linux-cache-spec
    cache:
        key: ${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}
        paths: *cache-paths

.windows-cache-spec-template: &windows-cache-spec
    cache:
        paths: *cache-paths
        key: "%CI_COMMIT_REF_NAME%/%CI_JOB_NAME%/%CI_RUNNER_ID%"

.artifacts-spec-build-linux-template: &artifact-spec-build-linux
    artifacts:
        name: "mce_${CI_COMMIT_REF_NAME##*/}_${CI_JOB_ID}_${CI_COMMIT_SHA}_${CI_JOB_NAME}"
        expire_in: 1 week
        paths:
        - ${BUILD_COMPILER_NAME}

.artifacts-spec-build-windows-template: &artifact-spec-build-windows
    artifacts:
        name: "mce_%CI_COMMIT_REF_NAME:*/=%_%CI_JOB_ID%_%CI_COMMIT_SHA%_%CI_JOB_NAME%"
        expire_in: 1 week
        paths:
        - "%BUILD_COMPILER_NAME%"

.linux-build-template: &linux-build-task
    stage: build
    <<: *linux-cache-spec    
    script:
    - cmake -E make_directory build
    - cd build
    - cmake -U*_INCLUDE -U*_LIBS -ULIBS_DIR -G "Unix Makefiles" -DCMAKE_C_COMPILER=${BUILD_C_COMPILER} -DCMAKE_CXX_COMPILER=${BUILD_CXX_COMPILER} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSANITIZER_INSTRUMENTATION=${BUILD_SANITIZE} ..
    - cmake --build . -- -j ${BUILD_CONCURRENCY}
    - export LD_LIBRARY_PATH=/usr/local/lib/${BUILD_COMPILER_NAME}-${BUILD_TYPE,,}/
    - ctest --output-on-failure
    - cd ..
    - cmake -E make_directory ${BUILD_COMPILER_NAME}
    - cmake -E copy build/multicore_engine_parsers/libmce_parsers.a ${BUILD_COMPILER_NAME}/libmce_parsers.a
    - cmake -E copy build/multicore_engine_base/libmce_base.a ${BUILD_COMPILER_NAME}/libmce_base.a
    - cmake -E copy build/multicore_engine_core/libmce_core.a ${BUILD_COMPILER_NAME}/libmce_core.a
    - cmake -E copy build/multicore_engine_demo/mce_demo ${BUILD_COMPILER_NAME}/demo
    - cmake -E copy build/multicore_engine_load_unit_gen/mce_load_unit_gen ${BUILD_COMPILER_NAME}/load_unit_gen
    - cmake -E copy build/multicore_engine_pack_file_gen/mce_pack_file_gen ${BUILD_COMPILER_NAME}/pack_file_gen
    - cmake -E copy build/multicore_engine_model_converter/mce_model_converter ${BUILD_COMPILER_NAME}/model_converter
    - cmake -E copy build/multicore_engine_assets/assets.pack ${BUILD_COMPILER_NAME}/assets.pack

.mingw-build-template: &mingw-build-task
    stage: build
    <<: *windows-cache-spec    
    script:
    - cmake -E make_directory build
    - cd build
    - cmake -U*_INCLUDE -U*_LIBS -ULIBS_DIR -G "MinGW Makefiles" -DCMAKE_C_COMPILER=%BUILD_C_COMPILER% -DCMAKE_CXX_COMPILER=%BUILD_CXX_COMPILER% -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ..
    - cmake --build . -- -j %BUILD_CONCURRENCY%
    - ctest --output-on-failure
    - cd ..
    - cmake -E make_directory %BUILD_COMPILER_NAME%
    - cmake -E copy build/multicore_engine_parsers/libmce_parsers.a %BUILD_COMPILER_NAME%/libmce_parsers.a
    - cmake -E copy build/multicore_engine_base/libmce_base.a %BUILD_COMPILER_NAME%/libmce_base.a
    - cmake -E copy build/multicore_engine_core/libmce_core.a %BUILD_COMPILER_NAME%/libmulticore_engine_core.a
    - cmake -E copy build/multicore_engine_demo/mce_demo.exe %BUILD_COMPILER_NAME%/demo.exe
    - cmake -E copy build/multicore_engine_load_unit_gen/mce_load_unit_gen.exe %BUILD_COMPILER_NAME%/load_unit_gen.exe
    - cmake -E copy build/multicore_engine_pack_file_gen/mce_pack_file_gen.exe %BUILD_COMPILER_NAME%/pack_file_gen.exe
    - cmake -E copy build/multicore_engine_model_converter/mce_model_converter.exe %BUILD_COMPILER_NAME%/model_converter.exe
    - cmake -E copy build/multicore_engine_assets/assets.pack %BUILD_COMPILER_NAME%/assets.pack

.msbuild-build-template: &msbuild-build-task
    stage: build
    <<: *windows-cache-spec    
    script:
    - cmake -E make_directory build
    - cd build
    - cmake -U*_INCLUDE -U*_LIBS -ULIBS_DIR -G "Visual Studio 15 2017 Win64" ..
    - cmake --build . --config %BUILD_TYPE% -- /m:%BUILD_CONCURRENCY%
    - ctest -C %BUILD_TYPE% --output-on-failure
    - cd ..
    - cmake -E make_directory %BUILD_COMPILER_NAME%
    # FIXME: These libraries are huge on release build due to LTCG and are therefore excluded for now.
    #- cmake -E copy build/multicore_engine_parsers/%BUILD_TYPE%/mce_parsers.lib %BUILD_COMPILER_NAME%/mce_parsers.lib
    #- cmake -E copy build/multicore_engine_base/%BUILD_TYPE%/mce_base.lib %BUILD_COMPILER_NAME%/mce_base.lib
    #- cmake -E copy build/multicore_engine_core/%BUILD_TYPE%/mce_core.lib %BUILD_COMPILER_NAME%/mce_core.lib
    - cmake -E copy build/multicore_engine_demo/%BUILD_TYPE%/mce_demo.exe %BUILD_COMPILER_NAME%/demo.exe
    - cmake -E copy build/multicore_engine_load_unit_gen/%BUILD_TYPE%/mce_load_unit_gen.exe %BUILD_COMPILER_NAME%/load_unit_gen.exe
    - cmake -E copy build/multicore_engine_pack_file_gen/%BUILD_TYPE%/mce_pack_file_gen.exe %BUILD_COMPILER_NAME%/pack_file_gen.exe
    - cmake -E copy build/multicore_engine_model_converter/%BUILD_TYPE%/mce_model_converter.exe %BUILD_COMPILER_NAME%/model_converter.exe
    - cmake -E copy build/multicore_engine_assets/assets.pack %BUILD_COMPILER_NAME%/assets.pack
    - cmake -E remove_directory build/multicore_engine_assets

.package-task-template: &package-task
    stage: package
    variables:
        GIT_STRATEGY: none
    script:
    - sha1sum -b cloc_report.txt refman.pdf gcc/* clang/* msvc/* mingw/* > checksums.txt
    - cat checksums.txt
    - cat cloc_report.txt
    tags:
    - package
    artifacts: &package-artifact-spec
        name: "mce_${CI_COMMIT_REF_NAME##*/}_${CI_JOB_ID}_${CI_COMMIT_SHA}"
        paths:
        - refman_html
        - refman.pdf
        - cloc_report.txt
        - gcc
        - clang
        - msvc
        - mingw
        - checksums.txt
        - licenses

gcc-debug-build:
    variables:
        BUILD_CXX_COMPILER: "g++"
        BUILD_C_COMPILER: "gcc"
        BUILD_TYPE: "Debug"
        BUILD_COMPILER_NAME: "gcc"
        BUILD_SANITIZE: "YES"
    tags:
    - cpp
    <<: *linux-build-task

gcc-release-build:
    variables:
        BUILD_CXX_COMPILER: "g++"
        BUILD_C_COMPILER: "gcc"
        BUILD_TYPE: "Release"
        BUILD_COMPILER_NAME: "gcc"
        BUILD_SANITIZE: "NO"
    tags:
    - cpp
    <<: *linux-build-task
    <<: *artifact-spec-build-linux

clang-debug-build:
    variables:
        BUILD_CXX_COMPILER: "clang++"
        BUILD_C_COMPILER: "clang"
        BUILD_TYPE: "Debug"
        BUILD_COMPILER_NAME: "clang"
        BUILD_SANITIZE: "YES"
    tags:
    - cpp
    <<: *linux-build-task

clang-release-build:
    variables:
        BUILD_CXX_COMPILER: "clang++"
        BUILD_C_COMPILER: "clang"
        BUILD_TYPE: "Release"
        BUILD_COMPILER_NAME: "clang"
        BUILD_SANITIZE: "NO"
    tags:
    - cpp
    <<: *linux-build-task
    <<: *artifact-spec-build-linux

msvc-debug-build:
    variables:
        BUILD_COMPILER_NAME: "msvc"
        BUILD_TYPE: "Debug"
    tags:
    - win-cpp
    <<: *msbuild-build-task

msvc-release-build:
    variables:
        BUILD_COMPILER_NAME: "msvc"
        BUILD_TYPE: "Release"
    tags:
    - win-cpp
    <<: *msbuild-build-task
    <<: *artifact-spec-build-windows

mingw-debug-build:
    variables:
        BUILD_CXX_COMPILER: "g++"
        BUILD_C_COMPILER: "gcc"
        BUILD_TYPE: "Debug"
        BUILD_COMPILER_NAME: "mingw"
    tags:
    - win-cpp
    <<: *mingw-build-task

mingw-release-build:
    variables:
        BUILD_CXX_COMPILER: "g++"
        BUILD_C_COMPILER: "gcc"
        BUILD_TYPE: "Release"
        BUILD_COMPILER_NAME: "mingw"
    tags:
    - win-cpp
    <<: *mingw-build-task
    <<: *artifact-spec-build-windows

cpp-check:
    dependencies: []
    stage: auxiliary
    script:
    - cppcheck -j 8 -v --inline-suppr --error-exitcode=2 --enable=all -U_MSC_VER -I multicore_engine_base/include/ -I multicore_engine_core/include/ .
    tags:
    - cpp

scan-build:
    dependencies: []
    stage: auxiliary
    script:
    - mkdir -p build && cd build
    - cmake -U*_INCLUDE -U*_LIBS -ULIBS_DIR -G "Unix Makefiles" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Debug -DSTATIC_ANALYSIS_ONLY=YES ..
    - scan-build --status-bugs make -j $[$(grep -c ^processor /proc/cpuinfo)+2] config=debug CC=clang CXX=clang++
    tags:
    - cpp
    <<: *linux-cache-spec    

api-doc:
    dependencies: []
    stage: auxiliary
    script:
    - chmod +x generate_cloc_report.sh
    - ./generate_cloc_report.sh
    - doxygen Doxyfile
    - cd doc/latex
    - pdflatex refman.tex > LaTeX.log
    - makeindex refman >> LaTeX.log
    - pdflatex refman.tex >> LaTeX.log
    - pdflatex refman.tex >> LaTeX.log
    - mv refman.pdf ../..
    - cd ..
    - mv html ../refman_html
    - cat warnings.log
    tags:
    - latex
    - doxygen
    cache:
        paths:
        - doc
    artifacts:
        name: "mce_${CI_COMMIT_REF_NAME##*/}_${CI_JOB_ID}_${CI_COMMIT_SHA}_${CI_JOB_NAME}"
        expire_in: 1 week
        paths:
        - refman.pdf
        - refman_html
        - cloc_report.txt

license-pack-windows:
    dependencies: []
    stage: auxiliary
    script:
    - mkdir licenses\windows
    - cd licenses\windows
    - mkdir Boost glfw gli glm TBB vulkan-sdk zlib mingw-w64\mingw-w64
    - copy C:\Libs\Boost\LICENSE_1_0.txt Boost
    - copy C:\Libs\glfw\COPYING.txt glfw
    - copy C:\Libs\gli\copying.txt gli
    - copy C:\Libs\glm\copying.txt glm
    - copy C:\Libs\TBB\LICENSE TBB
    - copy %VULKAN_SDK%\LICENSE.txt vulkan-sdk
    - copy %VULKAN_SDK%\SDK_LICENSE.rtf vulkan-sdk
    - copy C:\Libs\zlib\README zlib
    - cmake -E copy_directory C:/mingw-w64/mingw64/licenses/winpthreads mingw-w64/winpthreads
    - cmake -E copy_directory C:/mingw-w64/mingw64/licenses/gcc mingw-w64/gcc
    - copy C:\mingw-w64\mingw64\licenses\mingw-w64\COPYING.MinGW-w64-runtime.txt mingw-w64
    - copy C:\Libs\gtest\GMOCK-LICENSE.txt
    - copy C:\Libs\gtest\GMOCK-CONTRIBUTORS.txt
    - copy C:\Libs\gtest\GTEST-LICENSE.txt
    - copy C:\Libs\gtest\GTEST-CONTRIBUTORS.txt
    tags:
    - win-cpp
    artifacts:
        name: "mce_%CI_COMMIT_REF_NAME:*/=%_%CI_JOB_ID%_%CI_COMMIT_SHA%_%CI_JOB_NAME%"
        expire_in: 1 week
        paths:
        - licenses
        
license-pack-linux:
    dependencies: []
    stage: auxiliary
    script:
    - mkdir -p licenses/linux
    - cd licenses/linux
    - mkdir Boost glfw gli glm TBB vulkan-sdk zlib libc++ libstdc++ libgcc llvm-runtime g++ gcc-base gtest gmock
    - cp /usr/local/share/doc/boost/LICENSE_1_0.txt Boost
    - cp /usr/share/doc/libglfw3/copyright glfw
    - cp /usr/share/doc/libgli-dev/copyright gli
    - cp /usr/share/doc/libglm-dev/copyright glm
    - cp /usr/share/doc/libtbb-dev/copyright TBB
    - cp /usr/local/share/doc/vulkan-sdk/LICENSE.txt vulkan-sdk
    - cp /usr/local/share/doc/vulkan-sdk/sdk_license.html vulkan-sdk
    - cp /usr/share/doc/zlib1g-dev/copyright zlib
    - cp /usr/share/doc/libc++-dev/copyright libc++
    - cp /usr/share/doc/libstdc++-6-dev/copyright libstdc++
    - cp /usr/share/doc/libgcc-6-dev/copyright libgcc
    - cp /usr/share/doc/llvm-3.8-runtime/copyright llvm-runtime
    - cp /usr/share/doc/g++-6/copyright g++
    - cp /usr/share/doc/gcc-6-base/copyright gcc-base
    - cp /usr/local/share/doc/googletest/LICENSE gtest
    - cp /usr/local/share/doc/googletest/CONTRIBUTORS gtest
    - cp /usr/local/share/doc/googlemock/LICENSE gmock
    - cp /usr/local/share/doc/googlemock/CONTRIBUTORS gmock
    tags:
    - cpp
    artifacts:
        name: "mce_${CI_COMMIT_REF_NAME##*/}_${CI_JOB_ID}_${CI_COMMIT_SHA}_${CI_JOB_NAME}"
        expire_in: 1 week
        paths:
        - licenses

package-base:
    <<: *package-task
    except: 
    - tags
    artifacts:
        <<: *package-artifact-spec
        expire_in: 6 months

package-tags:
    <<: *package-task
    only: 
    - tags

