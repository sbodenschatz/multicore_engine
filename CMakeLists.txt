cmake_minimum_required (VERSION 2.6)
project (multicore_engine)

if (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
	set(CMAKE_CXX_FLAGS "${CMAKE_FXX_FLAGS} -stdlib=libc++ -Wall -Wextra -std=c++14")
endif ()
if (${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -std=c++14")
endif ()

add_definitions(-DGLM_FORCE_RADIANS -DGLM_SWIZZLE -DGLM_FORCE_SIZE_T_LENGTH -DZLIB_CONST)
include_directories(${CMAKE_SOURCE_DIR}/multicore_engine_core/include)
include_directories(${CMAKE_SOURCE_DIR}/multicore_engine_parsers/include)

if (CMAKE_BUILD_TYPE STREQUAL Debug)
	add_definitions(-DDEBUG)
else ()
	add_definitions(-DNDEBUG)	
endif()

if (WIN32)
	include_directories(SYSTEM C:/Libs/Boost/include)
	include_directories(SYSTEM C:/Libs/glm/include)
	include_directories(SYSTEM C:/Libs/zlib/include)
	if(CMAKE_BUILD_TYPE STREQUAL Debug)
		link_directories(C:/Libs/Boost/lib_x64_mingw_debug)
		link_directories(C:/Libs/zlib/lib_x64_mingw_debug)
	elseif(CMAKE_BUILD_TYPE STREQUAL Release)
		link_directories(C:/Libs/Boost/lib_x64_mingw_release)
		link_directories(C:/Libs/zlib/lib_x64_mingw_release)
	endif()
	link_libraries(ws2_32)
	link_libraries(mswsock)
	link_libraries(zstatic)
endif (WIN32)

link_libraries(pthread)
link_libraries(boost_program_options)
link_libraries(boost_filesystem)
link_libraries(boost_system)
link_libraries(boost_thread)

add_subdirectory(multicore_engine_parsers)
add_subdirectory(multicore_engine_core)
add_subdirectory(multicore_engine_core_tests)
add_subdirectory(multicore_engine_demo)
add_subdirectory(multicore_engine_load_unit_gen)
add_subdirectory(multicore_engine_pack_file_gen)
